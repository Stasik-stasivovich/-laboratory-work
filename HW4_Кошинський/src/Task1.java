/*

Author : Koshynskyi Stanislav
file Task1.java
Уявіть собі ситуацію коли Карелу необхідно працювати з перфокартою (були такі картонні аркуші на яких була пробита певна інформацію, яку комп'ютер мав опрацювати).

		Ітак, Карел сидить на лівому кутку перфокарти.



		Частково закриті прямокутники в середині перфокарти являють собою райони голосування. Уявимо собі, що ці перфокарти призначені для анонімного голосування на виборах мера Києва.

		За замовчанням користувачу видається перфокарта, що повністю заповнена. Всі прямокутники заповнені як це зроблено на малюнку в стовбчику 2 та 8.

		Коли виборець хоче проголосувати проти всіх, він має продавити всі біпери як в стовбчику 4. Але інколи так трапляється, що людина погано продавлює клітинки і біпери зостаються на місці як в стовбчику 6. Але ситуація в стовбчику 10, ще гірша біпер з центрального ряду продавився і пристав до комірки 10,2 і тепер в ній знаходиться два біпери.

		Давайте уявимо, що на законодавчому рівні було вирішено, що якщо в центральній комірці біпер продавлений то виборець голосує проти даного кандидата і Карел має прибрати інші зайві біпери з колонки, як це зображено на малюнку нижче:



		Карел має спиратися на наступні знання:

		світ складається з одного рядка прямокутників для голосування
		прямокутники для голосування чергуються одним порожнім стовбчиком
		прямокутників для голосування може бути більше (або менше) ніж зображено на малюнку
		світ починається порожнім стовбчиком і закінчується порожнім стовбчиком
		прямокутники не завжди складаються з трьох комірок (висота прямокутників може бути різною)
		Карел завжди починає роботу зліва від першого прямокутника для голосування, головою на схід, в рядку, що проходить через всі прямокутники
		Карел має закінчити роботу обличчам на схід в останньому стовбчику перфокарти
		Напишіть програму в якій Карел чистить перфокарту. Пам'ятайте, що перфокарта може бути довша за зображену на малюнку.



*/




import stanford.karel.SuperKarel;


public class Task1 extends SuperKarel{
	public void run(){
		move();
		if (noBeepersPresent()){
			clearColumn();
			goToMidle();
		}
		if (beepersPresent()){
			clearColumn();
			buildColumn();
			goToMidleFromBot();
		}
		while (frontIsClear()){
			move();
			if (frontIsClear()){
				move();
				if (noBeepersPresent()){
					clearColumn();
					goToMidle();
				}
				if (beepersPresent()){
					clearColumn();
					buildColumn();
					goToMidleFromBot();
				}
			}
		}
		
	}
private void buildColumn() {
		turnAround();
		while (frontIsClear()){
			putBeeper();
			move();
		}
		putBeeper();
		
	}
private void goToMidleFromBot() {
	turnAround();
	while (rightIsBlocked()){
		move();
	}
	turnRight();
	
}
//йти до центра бюлетені
	private void goToMidle() {
		turnAround();
		while (leftIsBlocked())move();
		turnLeft();
		
	}
//clear column
	private void clearColumn() {
		turnRight();
		pickAllBeperInFront();
		turnAround();
		pickAllBeperInFront();
			}
//pick all beeper in front
	private void pickAllBeperInFront() {
		while(frontIsClear()){
			while (beepersPresent())pickBeeper();
		move();
		while (beepersPresent())pickBeeper();
	
		}
		
	}

}
